渲染函数
	(function anonymous(
	) {
	with(this){return _c('div',[_v(_s(test))])}
	})

initProxy
hasHandler

compileToFunctions 渲染函数
var ref = compileToFunctions(template, {
        shouldDecodeNewlines: shouldDecodeNewlines,
        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
        delimiters: options.delimiters,
        comments: options.comments
      }, this);

API
	delimiters
	comments

	
// 编译器的祖宗
createCompilerCreator 创建一个编译器 => return createCompiler => return compile
createCompiler
compile

createCompileToFunctionFn => return compileToFunctions
compileToFunctions

createCompiler

创建一个编译器
var ref$1 = createCompiler(baseOptions);
var compile = ref$1.compile;
var compileToFunctions = ref$1.compileToFunctions;

// 编译器内置的配置选项
var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};



// 编译器的祖宗
function createCompilerCreator (baseCompile) {
  return function createCompiler (baseOptions) {
  	// 核心函数
    function compile (
      template, 		//模板
      options
    ) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];
      finalOptions.warn = function (msg, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        // merge custom modules
        if (options.modules) {
          finalOptions.modules =
            (baseOptions.modules || []).concat(options.modules);
        }
        // merge custom directives
        if (options.directives) {
          finalOptions.directives = extend(
            Object.create(baseOptions.directives),
            options.directives
          );
        }
        // copy other options
        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      var compiled = baseCompile(template, finalOptions);
      {
        errors.push.apply(errors, detectErrors(compiled.ast));
      }
      compiled.errors = errors;
      compiled.tips = tips;
      return compiled
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    }
  }
}

// code 字符串 errors 错误信息
function createFunction (code, errors) {
  try {
    return new Function(code)		// 渲染函数生成
  } catch (err) {
    errors.push({ err: err, code: code });
    return noop
  }
}


### vue 的 虚拟DOM 和 diff